
exports.up = function(knex, Promise) {
    return knex.schema
    .createTable('animal_meta', tbl => {
        tbl.increments();
        tbl.integer('animal_id')
            .notNullable()
            .unsigned()
            .references('id')
            .inTable('animals')
            .onDelete('RESTRICT')
            .onUpdate('CASCADE')
        tbl.integer('breed_id')
            .notNullable()
            .unsigned()
            .references('id')
            .inTable('breeds')
            .onDelete('RESTRICT')
            .onUpdate('CASCADE')
        tbl.boolean('is_mixed')
            .notNullable()
        tbl.integer('age_id')
            .notNullable()
            .unsigned()
            .references('id')
            .inTable('ages')
            .onDelete('RESTRICT')
            .onUpdate('CASCADE')
        tbl.string('health', 1024)
            .notNullable()
        tbl.integer('size_id')
            .notNullable()
            .unsigned()
            .references('id')
            .inTable('size')
            .onDelete('RESTRICT')
            .onUpdate('CASCADE')
        tbl.string('color', 512)
            .notNullable()
        tbl.integer('coat_length_id')
            .notNullable()
            .unsigned()
            .references('id')
            .inTable('coat_length')
            .onDelete('RESTRICT')
            .onUpdate('CASCADE')
        tbl.boolean('is_male')
            .notNullable()
        tbl.boolean('is_house_trained')
            .notNullable()
        tbl.boolean('is_neutered_spayed')
            .notNullable()
        tbl.boolean('is_good_with_kids')
            .notNullable()
        tbl.boolean('is_good_with_dogs')
            .notNullable()
        tbl.boolean('is_good_with_cats')
            .notNullable()
        tbl.boolean('is_vaccinated')
            .notNullable()
        tbl.text('description')
            .notNullable()
    })
    .createTable('animal_admin', tbl => {
        tbl.increments();
        tbl.text('notes')
            .notNullable();
        tbl.integer('animal_id')
            .notNullable()
            .unsigned()
            .references('id')
            .inTable('animals')
            .onDelete('RESTRICT')
            .onUpdate('CASCADE')
        tbl.integer('shelter_user_id')
            .notNullable()
            .unsigned()
            .references('id')
            .inTable('shelter_users')
            .onDelete('RESTRICT')
            .onUpdate('CASCADE')
        tbl.timestamp('created_at', { precision: 6 })
            .defaultTo(knex.fn.now(6));
    })
    .createTable('applications', tbl => {
        tbl.increments();
        tbl.integer('animal_id')
            .notNullable()
            .unsigned()
            .references('id')
            .inTable('animals')
            .onDelete('RESTRICT')
            .onUpdate('CASCADE')
        tbl.integer('shelter_id')
            .notNullable()
            .unsigned()
            .references('id')
            .inTable('shelters')
            .onDelete('RESTRICT')
            .onUpdate('CASCADE')
        tbl.integer('application_status_id')
            .notNullable()
            .unsigned()
            .references('id')
            .inTable('application_status')
            .onDelete('RESTRICT')
            .onUpdate('CASCADE')
        tbl.integer('user_id')
            .notNullable()
            .unsigned()
            .references('id')
            .inTable('users')
            .onDelete('RESTRICT')
            .onUpdate('CASCADE')
        tbl.timestamp('created_at', { precision: 6 })
            .defaultTo(knex.fn.now(6));
    })
    .createTable('user_meta', tbl => {
        tbl.increments();
        tbl.integer('user_id')
            .notNullable()
            .unsigned()
            .references('id')
            .inTable('users')
            .onDelete('RESTRICT')
            .onUpdate('CASCADE')
        tbl.string('phone_number', 256)
        tbl.string('name', 512)
        tbl.string('street_address', 512)
        tbl.string('city', 256)
        tbl.integer('state_id')
            .unsigned()
            .references('id')
            .inTable('states')
            .onDelete('RESTRICT')
            .onUpdate('CASCADE')
        tbl.string('zip', 128)
        tbl.integer('shelter_user_id')
            .unsigned()
            .references('id')
            .inTable('shelter_users')
            .onDelete('RESTRICT')
            .onUpdate('CASCADE')
    })
    .createTable('pictures', tbl => {
        tbl.increments();
        tbl.string('img_url', 512)
            .notNullable();
        tbl.integer('animal_id')
            .notNullable()
            .unsigned()
            .references('id')
            .inTable('animals')
            .onDelete('RESTRICT')
            .onUpdate('CASCADE');
        tbl.integer('img_id')
            .notNullable()
            .unsigned()
    })
    .createTable('animal_follows', tbl => {
        tbl.integer('animal_id')
            .notNullable()
            .unsigned()
            .references('id')
            .inTable('animals')
            .onDelete('RESTRICT')
            .onUpdate('CASCADE')
        tbl.integer('user_id')
            .notNullable()
            .unsigned()
            .references('id')
            .inTable('users')
            .onDelete('RESTRICT')
            .onUpdate('CASCADE')
    })
};

exports.down = function(knex, Promise) {
    return knex.schema
        .dropTableIfExists('animal_meta')
        .dropTableIfExists('animal_admin')
        .dropTableIfExists('applications')
        .dropTableIfExists('user_meta')
        .dropTableIfExists('pictures')
        .dropTableIfExists('animal_follows')
};
